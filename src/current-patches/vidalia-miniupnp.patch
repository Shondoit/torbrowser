Index: INSTALL
===================================================================
--- INSTALL	(revision 2465)
+++ INSTALL	(working copy)
@@ -206,3 +206,8 @@
 'cmake --help' or 'man cmake' (on non-Windows platforms) for more information
 about supported generators and configuration options.
 
+Including UPnP support
+----------------------
+
+cmake -G "MSYS Makefiles" -DMINIUPNPC_LIBRARY_DIR="/usr/local/lib" -DMINIUPNPC_INCLUDE_DIR="/usr/local/include" .
+
Index: src/vidalia/CMakeLists.txt
===================================================================
--- src/vidalia/CMakeLists.txt	(revision 2465)
+++ src/vidalia/CMakeLists.txt	(working copy)
@@ -16,6 +16,7 @@
   ${CMAKE_CURRENT_SOURCE_DIR}
   ${CMAKE_CURRENT_SOURCE_DIR}/config
   ${CMAKE_CURRENT_SOURCE_DIR}/help/browser
+  ${MINIUPNPC_INCLUDE_DIR}
 )
 configure_file(
   ${CMAKE_CURRENT_SOURCE_DIR}/res/vidalia_win.rc.in
@@ -234,9 +235,16 @@
 endif(APPLE)
 add_dependencies(${vidalia_BIN} translations)
 
+## Link in miniupnpc
+find_library(MINIUPNPC
+    NAMES miniupnpc
+    PATHS ${MINIUPNPC_LIBRARY_DIR}
+)
+
 ## Link to the Qt libraries and other libraries built as a part of Vidalia
 target_link_libraries(${vidalia_BIN}
   ${QT_LIBRARIES}
+  ${MINIUPNPC}
   torcontrol
   util
 )
@@ -268,3 +276,4 @@
 endif(NOT WIN32 AND NOT APPLE)
 
 
+
Index: src/vidalia/config/serversettings.cpp
===================================================================
--- src/vidalia/config/serversettings.cpp	(revision 2465)
+++ src/vidalia/config/serversettings.cpp	(working copy)
@@ -130,6 +130,9 @@
   bool rc;
 
   if (isServerEnabled()) {
+    /* Configure UPnP device to forward DirPort and OrPort */
+    /* TODO: does isServerEnabled() return true when a server is just set up? */
+    configurePortForwarding();
     rc = torControl()->setConf(confValues(), errmsg);
   } else { 
     QStringList resetKeys;
@@ -152,6 +155,72 @@
   return rc;
 }
 
+
+/** Based on http://miniupnp.free.fr/files/download.php?file=xchat-upnp20061022.patch */
+void
+ServerSettings::init_upnp()
+{
+  struct UPNPDev * devlist;
+  char lanaddr[256];
+  int retval;
+
+  printf("TB : init_upnp()\n");
+
+  memset(&urls, 0, sizeof(struct UPNPUrls));
+  memset(&data, 0, sizeof(struct IGDdatas));
+
+  devlist = upnpDiscover(2000, NULL, NULL);
+  retval = UPNP_GetValidIGD(devlist, &urls, &data, lanaddr, 256);
+  printf("UPNP: %d", retval);
+
+  freeUPNPDevlist(devlist);
+}
+
+/** Based on http://miniupnp.free.fr/files/download.php?file=xchat-upnp20061022.patch */
+void
+ServerSettings::upnp_add_redir(const char * addr, int port)
+{
+	char port_str[16];
+	int r;
+	printf("TB : upnp_add_redir (%s, %d)\n", addr, port);
+	if(urls.controlURL[0] == '\0')
+	{
+		printf("TB : the init was not done !\n");
+		return;
+	}
+	sprintf(port_str, "%d", port);
+	r = UPNP_AddPortMapping(urls.controlURL, data.servicetype,
+	                        port_str, port_str, addr, 0, "TCP");
+	if(r==0)
+		printf("AddPortMapping(%s, %s, %s) failed\n", port_str, port_str, addr);
+}
+
+/** Based on http://miniupnp.free.fr/files/download.php?file=xchat-upnp20061022.patch */
+void
+ServerSettings::upnp_rem_redir(int port)
+{
+	char port_str[16];
+	int t;
+	printf("TB : upnp_rem_redir (%d)\n", port);
+	if(urls.controlURL[0] == '\0')
+	{
+		printf("TB : the init was not done !\n");
+		return;
+	}
+	sprintf(port_str, "%d", port);
+	UPNP_DeletePortMapping(urls.controlURL, data.servicetype, port_str, "TCP");
+}
+
+/* TODO: We should call this periodically, in case the router gets rebooted or forgets its UPnP settings */
+/* TODO: Remove port forwarding when Tor is shutdown or the ORPort changes */
+/* TODO: init_upnp() will block for up to 2 seconds. We should fire off a thread */
+/** Configure UPnP device to forward DirPort and ORPort */
+void
+ServerSettings::configurePortForwarding()
+{
+  init_upnp();
+}
+
 /** Virtual method called when we retrieve a server-related setting from Tor.
  * Currently this just translates BandwidthFoo to RelayBandwidthFoo when
  * appropriate. */
@@ -321,3 +390,4 @@
   setValue(SETTING_BANDWIDTH_BURST, rate);
 }
 
+
Index: src/vidalia/config/serversettings.h
===================================================================
--- src/vidalia/config/serversettings.h	(revision 2465)
+++ src/vidalia/config/serversettings.h	(working copy)
@@ -20,6 +20,10 @@
 #include "abstracttorsettings.h"
 #include "exitpolicy.h"
 
+#define STATICLIB
+#include <miniupnpc/miniwget.h>
+#include <miniupnpc/miniupnpc.h>
+#include <miniupnpc/upnpcommands.h>
 
 class ServerSettings : public AbstractTorSettings
 {
@@ -89,9 +93,20 @@
   virtual QVariant torValue(const QString &key) const;
 
 private:
+  /** Used by miniupnpc library */
+  struct UPNPUrls urls;
+  struct IGDdatas data;
+  void init_upnp();
+  void upnp_add_redir (const char * addr, int port);
+  void upnp_rem_redir(int port);
+
   /** Returns Tor-recognizable configuration keys and current values. */
   QHash<QString,QString> confValues();
+
+  /** Configure UPnP device to forward DirPort and ORPort */
+  void configurePortForwarding();
 };
 
 #endif
 
+
