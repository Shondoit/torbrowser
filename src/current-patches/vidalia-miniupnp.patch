Index: CMakeLists.txt
===================================================================
--- CMakeLists.txt	(revision 2473)
+++ CMakeLists.txt	(working copy)
@@ -16,6 +16,7 @@
   ${CMAKE_CURRENT_SOURCE_DIR}
   ${CMAKE_CURRENT_SOURCE_DIR}/config
   ${CMAKE_CURRENT_SOURCE_DIR}/help/browser
+  ${MINIUPNPC_INCLUDE_DIR}
 )
 configure_file(
   ${CMAKE_CURRENT_SOURCE_DIR}/res/vidalia_win.rc.in
@@ -61,6 +62,7 @@
   config/portvalidator.cpp
   config/serverpage.cpp
   config/serversettings.cpp
+  config/upnpcontrol.cpp
   config/torsettings.cpp
   config/vidaliasettings.cpp
   config/vsettings.cpp
@@ -80,6 +82,7 @@
   config/portvalidator.h
   config/serverpage.h
   config/serversettings.h
+  config/upnpcontrol.h
   config/torsettings.h
   config/vidaliasettings.h
   config/vsettings.h
@@ -234,9 +237,16 @@
 endif(APPLE)
 add_dependencies(${vidalia_BIN} translations)
 
+## Link in miniupnpc
+find_library(MINIUPNPC
+    NAMES miniupnpc
+    PATHS ${MINIUPNPC_LIBRARY_DIR}
+)
+
 ## Link to the Qt libraries and other libraries built as a part of Vidalia
 target_link_libraries(${vidalia_BIN}
   ${QT_LIBRARIES}
+  ${MINIUPNPC}
   torcontrol
   util
 )
Index: config/serversettings.cpp
===================================================================
--- config/serversettings.cpp	(revision 2473)
+++ config/serversettings.cpp	(working copy)
@@ -20,6 +20,7 @@
 
 #include "serversettings.h"
 #include "torsettings.h"
+#include "upnpcontrol.h"
 
 /** Define the set of characters that are valid in a nickname. */
 #define VALID_NICKNAME_CHARS \
@@ -130,6 +131,9 @@
   bool rc;
 
   if (isServerEnabled()) {
+    /* Configure UPnP device to forward DirPort and OrPort */
+    /* TODO: does isServerEnabled() return true when a server is just set up? */
+    configurePortForwarding();
     rc = torControl()->setConf(confValues(), errmsg);
   } else { 
     QStringList resetKeys;
@@ -152,6 +156,17 @@
   return rc;
 }
 
+/* TODO: We should call this periodically, in case the router gets rebooted or forgets its UPnP settings */
+/* TODO: Remove port forwarding when Tor is shutdown or the ORPort changes */
+/* TODO: init_upnp() will block for up to 2 seconds. We should fire off a thread */
+/** Configure UPnP device to forward DirPort and ORPort */
+void
+ServerSettings::configurePortForwarding()
+{
+  UPNPControl *pUNPControl = UPNPControl::Instance();
+  pUNPControl->forwardPort(getORPort());
+}
+
 /** Virtual method called when we retrieve a server-related setting from Tor.
  * Currently this just translates BandwidthFoo to RelayBandwidthFoo when
  * appropriate. */
Index: config/serversettings.h
===================================================================
--- config/serversettings.h	(revision 2473)
+++ config/serversettings.h	(working copy)
@@ -91,6 +91,9 @@
 private:
   /** Returns Tor-recognizable configuration keys and current values. */
   QHash<QString,QString> confValues();
+
+  /** Configure UPnP device to forward DirPort and ORPort */
+  void configurePortForwarding();
 };
 
 #endif
Index: config/upnpcontrol.cpp
===================================================================
--- config/upnpcontrol.cpp	(revision 0)
+++ config/upnpcontrol.cpp	(revision 0)
@@ -0,0 +1,93 @@
+/*
+**  This file is part of Vidalia, and is subject to the license terms in the
+**  LICENSE file, found in the top level directory of this distribution. If 
+**  you did not receive the LICENSE file with this file, you may obtain it
+**  from the Vidalia source package distributed by the Vidalia Project at
+**  http://www.vidalia-project.net/. No part of Vidalia, including this file,
+**  may be copied, modified, propagated, or distributed except according to
+**  the terms described in the LICENSE file.
+*/
+
+/* 
+** \file upnpcontrol.cpp
+** \version $Id: torcontrol.h 2362 2008-02-29 04:30:11Z edmanm $
+** \brief Singleton object for interacting with UPNP device
+*/
+
+#include "upnpcontrol.h"
+
+UPNPControl* UPNPControl::pInstance = 0;
+UPNPControl* UPNPControl::Instance()
+{
+  if (0 == pInstance)
+    pInstance = new UPNPControl;
+  return pInstance;
+}
+
+UPNPControl::UPNPControl()
+{
+  init_upnp();
+}
+
+void
+UPNPControl::forwardPort(int port)
+{
+  upnp_add_redir(lanaddr, port);
+}
+
+/** Based on http://miniupnp.free.fr/files/download.php?file=xchat-upnp20061022.patch */
+void
+UPNPControl::init_upnp()
+{
+  struct UPNPDev * devlist;
+  int retval;
+
+  printf("TB : init_upnp()\n");
+
+  memset(&urls, 0, sizeof(struct UPNPUrls));
+  memset(&data, 0, sizeof(struct IGDdatas));
+
+  devlist = upnpDiscover(2000, NULL, NULL);
+  retval = UPNP_GetValidIGD(devlist, &urls, &data, lanaddr, sizeof(lanaddr));
+  printf("UPNP: %d", retval);
+
+  freeUPNPDevlist(devlist);
+}
+
+/** Based on http://miniupnp.free.fr/files/download.php?file=xchat-upnp20061022.patch */
+void
+UPNPControl::upnp_add_redir(const char * addr, int port)
+{
+	char port_str[16];
+	int r;
+	printf("TB : upnp_add_redir (%s, %d)\n", addr, port);
+	if(urls.controlURL[0] == '\0')
+	{
+		printf("TB : the init was not done !\n");
+		fflush(stdout);
+		return;
+	}
+	sprintf(port_str, "%d", port);
+	r = UPNP_AddPortMapping(urls.controlURL, data.servicetype,
+	                        port_str, port_str, addr, 0, "TCP");
+	if(r==0)
+		printf("AddPortMapping(%s, %s, %s) failed\n", port_str, port_str, addr);
+	fflush(stdout);
+}
+
+/** Based on http://miniupnp.free.fr/files/download.php?file=xchat-upnp20061022.patch */
+void
+UPNPControl::upnp_rem_redir(int port)
+{
+	char port_str[16];
+	int t;
+	printf("TB : upnp_rem_redir (%d)\n", port);
+	if(urls.controlURL[0] == '\0')
+	{
+		printf("TB : the init was not done !\n");
+		fflush(stdout);
+		return;
+	}
+	sprintf(port_str, "%d", port);
+	UPNP_DeletePortMapping(urls.controlURL, data.servicetype, port_str, "TCP");
+}
Index: config/upnpcontrol.h
===================================================================
--- config/upnpcontrol.h	(revision 0)
+++ config/upnpcontrol.h	(revision 0)
@@ -0,0 +1,48 @@
+/*
+**  This file is part of Vidalia, and is subject to the license terms in the
+**  LICENSE file, found in the top level directory of this distribution. If 
+**  you did not receive the LICENSE file with this file, you may obtain it
+**  from the Vidalia source package distributed by the Vidalia Project at
+**  http://www.vidalia-project.net/. No part of Vidalia, including this file,
+**  may be copied, modified, propagated, or distributed except according to
+**  the terms described in the LICENSE file.
+*/
+
+/* 
+** \file upnpcontrol.h
+** \version $Id: torcontrol.h 2362 2008-02-29 04:30:11Z edmanm $
+** \brief Singleton object for interacting with UPNP device
+*/
+
+#ifndef _UPNPCONTROL_H
+#define _UPNPCONTROL_H
+
+#include <QObject>
+
+#define STATICLIB
+#include <miniupnpc/miniwget.h>
+#include <miniupnpc/miniupnpc.h>
+#include <miniupnpc/upnpcommands.h>
+
+class UPNPControl : public QObject
+{
+  Q_OBJECT
+
+public:
+  static UPNPControl* Instance();
+  void forwardPort(int port);
+protected:
+  UPNPControl();
+private:
+  static UPNPControl* pInstance;
+
+  /** Used by miniupnpc library */
+  struct UPNPUrls urls;
+  struct IGDdatas data;
+  char lanaddr[16];
+  void init_upnp();
+  void upnp_add_redir (const char * addr, int port);
+  void upnp_rem_redir(int port);
+};
+
+#endif 
