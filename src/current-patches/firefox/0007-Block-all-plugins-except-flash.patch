From 2954118c9ab70d2e1c4d983a8f101b3a237461bb Mon Sep 17 00:00:00 2001
From: Mike Perry <mikeperry-git@fscked.org>
Date: Wed, 28 Sep 2011 13:24:20 -0700
Subject: [PATCH 07/12] Block all plugins except flash.

We cannot use the @mozilla.org/extensions/blocklist;1 service, because we
actually want to stop plugins from ever entering the browser's process space
and/or executing code (for example, AV plugins that collect statistics/analyse
urls, magical toolbars that phone home or "help" the user, skype buttons that
ruin our day, and censorship filters). Hence we rolled our own.

See https://trac.torproject.org/projects/tor/ticket/3547#comment:6 for musings
on a better way. Until then, it is delta-darwinism for us.
---
 dom/plugins/base/nsPluginHost.cpp |   33 +++++++++++++++++++++++++++++++++
 dom/plugins/base/nsPluginHost.h   |    2 ++
 2 files changed, 35 insertions(+), 0 deletions(-)

diff --git a/dom/plugins/base/nsPluginHost.cpp b/dom/plugins/base/nsPluginHost.cpp
index 8578d56..3fbae53 100644
--- a/dom/plugins/base/nsPluginHost.cpp
+++ b/dom/plugins/base/nsPluginHost.cpp
@@ -1964,6 +1964,35 @@ PRBool nsPluginHost::IsDuplicatePlugin(nsPluginTag * aPluginTag)
   return PR_FALSE;
 }
 
+PRBool nsPluginHost::GhettoBlacklist(nsIFile *pluginFile)
+{
+    nsCString leaf;
+    const char *leafStr;
+    nsresult rv;
+    
+    rv = pluginFile->GetNativeLeafName(leaf);
+    if (NS_FAILED(rv)) {
+        return PR_TRUE; // fuck 'em. blacklist.
+    }
+
+    leafStr = leaf.get();
+
+    if (!leafStr) {
+        return PR_TRUE; // fuck 'em. blacklist.
+    }
+
+    // libgnashplugin.so, libflashplayer.so, Flash Player-10.4-10.5.plugin,
+    // NPSWF32.dll, NPSWF64.dll
+    if (strstr(leafStr, "libgnashplugin") == leafStr ||
+        strstr(leafStr, "libflashplayer") == leafStr ||
+        strstr(leafStr, "Flash Player") == leafStr ||
+        strstr(leafStr, "NPSWF") == leafStr) {
+        return PR_FALSE;
+    }
+
+    return PR_TRUE; // fuck 'em. blacklist.
+}
+
 typedef NS_NPAPIPLUGIN_CALLBACK(char *, NP_GETMIMEDESCRIPTION)(void);
 
 nsresult nsPluginHost::ScanPluginsDirectory(nsIFile *pluginsDir,
@@ -2085,6 +2114,10 @@ nsresult nsPluginHost::ScanPluginsDirectory(nsIFile *pluginsDir,
       continue;
     }
 
+    if (GhettoBlacklist(localfile)) {
+        continue;
+    }
+
     // if it is not found in cache info list or has been changed, create a new one
     if (!pluginTag) {
       nsPluginFile pluginFile(localfile);
diff --git a/dom/plugins/base/nsPluginHost.h b/dom/plugins/base/nsPluginHost.h
index 1cfd59b..7d83c20 100644
--- a/dom/plugins/base/nsPluginHost.h
+++ b/dom/plugins/base/nsPluginHost.h
@@ -278,6 +278,8 @@ private:
   // Loads all cached plugins info into mCachedPlugins
   nsresult ReadPluginInfo();
 
+  PRBool GhettoBlacklist(nsIFile *pluginFile);
+
   // Given a file path, returns the plugins info from our cache
   // and removes it from the cache.
   void RemoveCachedPluginsInfo(const char *filePath,
-- 
1.7.3.4

