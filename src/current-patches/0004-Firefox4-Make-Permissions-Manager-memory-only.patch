From 6f37edd80181906c37ace589fc26eabf6731b09d Mon Sep 17 00:00:00 2001
From: Mike Perry <mikeperry-git@fscked.org>
Date: Mon, 20 Jun 2011 17:07:56 -0700
Subject: [PATCH 4/4] Firefox4: Make Permissions Manager memory-only

This patch exposes a pref 'permissions.memory_only' that properly isolates the
permissions manager to memory, which is responsible for all user specified
site permissions, as well as stored STS policy.

The pref does successfully clear the permissions manager memory if toggled. It
does not need to be set in prefs.js, and can be handled by Torbutton.

https://trac.torproject.org/projects/tor/ticket/2950
---
 extensions/cookie/nsPermissionManager.cpp |   34 ++++++++++++++++++++++++++--
 1 files changed, 31 insertions(+), 3 deletions(-)

diff --git a/extensions/cookie/nsPermissionManager.cpp b/extensions/cookie/nsPermissionManager.cpp
index d182013..0a1aea6 100644
--- a/extensions/cookie/nsPermissionManager.cpp
+++ b/extensions/cookie/nsPermissionManager.cpp
@@ -60,6 +60,10 @@
 #include "mozStorageHelper.h"
 #include "mozStorageCID.h"
 #include "nsXULAppAPI.h"
+#include "nsCOMPtr.h"
+#include "nsIPrefService.h"
+#include "nsIPrefBranch.h"
+#include "nsIPrefBranch2.h"
 
 static nsPermissionManager *gPermissionManager = nsnull;
 
@@ -233,6 +237,11 @@ nsPermissionManager::Init()
     mObserverService->AddObserver(this, "profile-do-change", PR_TRUE);
   }
 
+  nsCOMPtr<nsIPrefBranch2> pbi = do_GetService(NS_PREFSERVICE_CONTRACTID);
+  if (pbi) {
+    pbi->AddObserver("permissions.", this, PR_FALSE);
+  }
+
 #ifdef MOZ_IPC
   if (IsChildProcess()) {
     // Get the permissions from the parent process
@@ -283,8 +292,18 @@ nsPermissionManager::InitDB(PRBool aRemoveFile)
   if (!storage)
     return NS_ERROR_UNEXPECTED;
 
+  PRBool memory_db = false;
+  nsCOMPtr<nsIPrefBranch> prefs = do_GetService(NS_PREFSERVICE_CONTRACTID);
+  if (prefs) {
+    prefs->GetBoolPref("permissions.memory_only", &memory_db); 
+  }
+
   // cache a connection to the hosts database
-  rv = storage->OpenDatabase(permissionsFile, getter_AddRefs(mDBConn));
+  if (memory_db) {
+    rv = storage->OpenSpecialDatabase("memory", getter_AddRefs(mDBConn));
+  } else {
+    rv = storage->OpenDatabase(permissionsFile, getter_AddRefs(mDBConn));
+  }
   NS_ENSURE_SUCCESS(rv, rv);
 
   PRBool ready;
@@ -294,7 +313,11 @@ nsPermissionManager::InitDB(PRBool aRemoveFile)
     rv = permissionsFile->Remove(PR_FALSE);
     NS_ENSURE_SUCCESS(rv, rv);
 
-    rv = storage->OpenDatabase(permissionsFile, getter_AddRefs(mDBConn));
+    if (memory_db) {
+      rv = storage->OpenSpecialDatabase("memory", getter_AddRefs(mDBConn));
+    } else {
+      rv = storage->OpenDatabase(permissionsFile, getter_AddRefs(mDBConn));
+    }
     NS_ENSURE_SUCCESS(rv, rv);
 
     mDBConn->GetConnectionReady(&ready);
@@ -825,7 +848,12 @@ NS_IMETHODIMP nsPermissionManager::Observe(nsISupports *aSubject, const char *aT
   ENSURE_NOT_CHILD_PROCESS;
 #endif
 
-  if (!nsCRT::strcmp(aTopic, "profile-before-change")) {
+  if (nsCRT::strcmp(aTopic, NS_PREFBRANCH_PREFCHANGE_TOPIC_ID) == 0) {
+    if (!nsCRT::strcmp(someData, NS_LITERAL_STRING("permissions.memory_only").get())) {
+      // XXX: Should we remove the file? Probably not..
+      InitDB(PR_FALSE);
+    }
+  } else if (!nsCRT::strcmp(aTopic, "profile-before-change")) {
     // The profile is about to change,
     // or is going away because the application is shutting down.
     if (!nsCRT::strcmp(someData, NS_LITERAL_STRING("shutdown-cleanse").get())) {
-- 
1.7.3.4

